// <auto-generated />
using System;
using BFF.ProductCatalogService.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace BFF.ProductCatalogService.Migrations
{
    [DbContext(typeof(ProductCatalogDbContext))]
    [Migration("20251001084130_InitialCreated")]
    partial class InitialCreated
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("BFF.ProductCatalogService.Infrastructure.Entity.Dimension", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("DisplayType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("ProductId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("Dimensions");
                });

            modelBuilder.Entity("BFF.ProductCatalogService.Infrastructure.Entity.DimensionValue", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("DimensionId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("DisplayValue")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("VariantId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("DimensionId");

                    b.HasIndex("VariantId");

                    b.ToTable("DimensionValues");
                });

            modelBuilder.Entity("BFF.ProductCatalogService.Infrastructure.Entity.Group", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Group");
                });

            modelBuilder.Entity("BFF.ProductCatalogService.Infrastructure.Entity.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UrlSlug")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("BFF.ProductCatalogService.Infrastructure.Entity.Variant", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid");

                    b.Property<string>("Sku")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Stock")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("Variants");
                });

            modelBuilder.Entity("GroupProduct", b =>
                {
                    b.Property<Guid>("GroupsId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ProductsId")
                        .HasColumnType("uuid");

                    b.HasKey("GroupsId", "ProductsId");

                    b.HasIndex("ProductsId");

                    b.ToTable("GroupProduct");
                });

            modelBuilder.Entity("BFF.ProductCatalogService.Infrastructure.Entity.Dimension", b =>
                {
                    b.HasOne("BFF.ProductCatalogService.Infrastructure.Entity.Product", null)
                        .WithMany("Dimensions")
                        .HasForeignKey("ProductId");
                });

            modelBuilder.Entity("BFF.ProductCatalogService.Infrastructure.Entity.DimensionValue", b =>
                {
                    b.HasOne("BFF.ProductCatalogService.Infrastructure.Entity.Dimension", null)
                        .WithMany("Values")
                        .HasForeignKey("DimensionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BFF.ProductCatalogService.Infrastructure.Entity.Variant", null)
                        .WithMany("DimensionValues")
                        .HasForeignKey("VariantId");
                });

            modelBuilder.Entity("BFF.ProductCatalogService.Infrastructure.Entity.Variant", b =>
                {
                    b.HasOne("BFF.ProductCatalogService.Infrastructure.Entity.Product", null)
                        .WithMany("Variants")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GroupProduct", b =>
                {
                    b.HasOne("BFF.ProductCatalogService.Infrastructure.Entity.Group", null)
                        .WithMany()
                        .HasForeignKey("GroupsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BFF.ProductCatalogService.Infrastructure.Entity.Product", null)
                        .WithMany()
                        .HasForeignKey("ProductsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BFF.ProductCatalogService.Infrastructure.Entity.Dimension", b =>
                {
                    b.Navigation("Values");
                });

            modelBuilder.Entity("BFF.ProductCatalogService.Infrastructure.Entity.Product", b =>
                {
                    b.Navigation("Dimensions");

                    b.Navigation("Variants");
                });

            modelBuilder.Entity("BFF.ProductCatalogService.Infrastructure.Entity.Variant", b =>
                {
                    b.Navigation("DimensionValues");
                });
#pragma warning restore 612, 618
        }
    }
}
